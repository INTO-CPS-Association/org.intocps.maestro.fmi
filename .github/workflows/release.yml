# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Release new version

on:
  workflow_dispatch:
    inputs:
      releaseversion:
        description: 'Release version'
#        required: true
#        default: '2.4.0'
#      snapshotversion:
#        description: 'Next snapshot version'
#        required: true
#        default: '2.4.1'

env:
  JAVA_VERSION: 1.8
  SERVER_ID: au-artifactory-snapshots
  PYTHON_VERSION: '3.9.9'



jobs:

  version_change:
    runs-on: ubuntu-latest
    outputs:
      build_tag: ${{ steps.tagging.outputs.build_tag }} # map step output to job output
      build_version: ${{ steps.tagging.outputs.build_version }} # map step output to job output
    steps:
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: setup git config
        run: |
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Maven download
        run: mvn validate dependency:resolve-plugins -B --quiet

      - name: Set release version
        id: tagging
        run: |
          NEW_RELEASE_VERSION=${{ github.event.inputs.releaseversion }}
          echo "Input version is $NEW_RELEASE_VERSION"
          if [ "$NEW_RELEASE_VERSION" == "" ]; then
            echo "Input version not set. Use current version"
            NEW_RELEASE_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          fi
          NEW_RELEASE_TAG="Release/${NEW_RELEASE_VERSION}"
          echo "release version is $NEW_RELEASE_VERSION"
          echo "Tag release version is now $NEW_RELEASE_TAG"
          mvn versions:set-property -Dproperty=revision "-DnewVersion=${NEW_RELEASE_VERSION}"
          mvn versions:set-property -Dproperty=changelist "-DnewVersion="
          mvn versions:set-property -Dproperty=sha1 "-DnewVersion="
          git add pom.xml
          git commit -m "New release version ${NEW_RELEASE_VERSION}"
          git tag -a "${NEW_RELEASE_TAG}" -m "Release version ${NEW_RELEASE_VERSION}"
          git push origin "${NEW_RELEASE_TAG}"
          mvn ci-friendly-flatten:version -Dprefix.regex="Release/*"
          SNAPSHOTVERSION=$(cat revision.txt)
          mvn versions:set-property -Dproperty=revision "-DnewVersion=$SNAPSHOTVERSION"
          mvn versions:set-property -Dproperty=changelist "-DnewVersion=-SNAPSHOT"
          mvn versions:set-property -Dproperty=sha1 "-DnewVersion="
          git add pom.xml
          git commit -m "Next snapshot version $SNAPSHOTVERSION"
          git push
          echo "::set-output name=build_tag::${NEW_RELEASE_TAG}"
          echo "::set-output name=build_version::${NEW_RELEASE_VERSION}"

  build:
    runs-on: ${{ matrix.os }}
    needs: version_change

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ] # ubuntu-latest, , macos-latest
        platform: [ x64 ] #x32, x64 ]
        exclude:
          - os: macos-latest
            platform: x32
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/checkout@v2
        with:
          submodules: 'true'
          ref: ${{ needs.version_change.outputs.build_tag }}

      - name: ubuntu add 32bit compiler
        run: sudo apt-get update && sudo apt-get install gcc-multilib
        if: matrix.platform == 'x32' && matrix.os == 'ubuntu-latest'

      - name: Set up Java x64
        if: matrix.platform == 'x64'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          architecture: x64

      - name: Set up Java x32
        if: matrix.platform == 'x86'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          architecture: x32

      - name: Put MSYS2_MinGW64 on PATH for windows
        if: matrix.os == 'windows-latest'
        # there is not yet an environment variable for this path from msys2/setup-msys2
        # We need this to get a gcc 11.2 that is new enough to compile the reference FMU3
        run: echo "C:\msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Maven download
        run: mvn validate dependency:resolve-plugins -B --quiet

      - name: Maven Build x32
        run: mvn -B package --file pom.xml -Pmake32
        if: matrix.platform == 'x32'

      - name: Maven Build x64
        run: mvn -B package --file pom.xml -Pmake
        if: matrix.platform == 'x64'

      - name: artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib-${{ needs.version_change.outputs.build_version }}
          path: |
            jnifmuapi/target/classes/lib/**/libfmuapi.so
            jnifmuapi/target/classes/lib/**/libfmuapi.dylib
            jnifmuapi/target/classes/lib/**/fmuapi.dll
          retention-days: 1


  final:
    runs-on: ubuntu-latest

    needs: [ version_change , build ]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.version_change.outputs.build_tag }}

      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Environment variables
        run: echo ${{ env.SERVER_ID }}

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          name: lib-${{ needs.version_change.outputs.build_version }}
          path: jnifmuapi/target/classes/lib

      - name: Set up Java x64
        if: matrix.platform == 'x64'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          architecture: x64

      - name: Set up Java x32
        if: matrix.platform == 'x86'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          architecture: x32

      - name: Deploy server
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          server-id: ${{ env.SERVER_ID }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD


      - name: Maven download
        run: mvn validate dependency:resolve-plugins -B --quiet

      - name: Maven Build Final
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true

      - name: Maven Deploy
        #        if: github.event_name == 'push' && (github.ref != 'refs/heads/development' || github.ref != 'refs/heads/master' )
        run: mvn -B package -Dmaven.test.skip=true -DskipITs -fae -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -Prelease-sign-artifacts




#        env:
#          MAVEN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

#      - name: Maven Deploy SNAPSHOT
#        if: github.event_name == 'push' && (github.ref == 'refs/heads/development' )
#        run: mvn "-Dhttp.keepAlive=false" "-Dmaven.wagon.http.pool=false" "-Dmaven.wagon.httpconnectionManager.ttlSeconds=120" -B deploy -Dsha1= -Dmaven.test.skip=true -DskipITs -fae -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -Prelease-sign-artifacts
#        env:
#          MAVEN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#
#      - name: Maven Deploy RELEASE
#        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' )
#        run: mvn "-Dhttp.keepAlive=false" "-Dmaven.wagon.http.pool=false" "-Dmaven.wagon.httpconnectionManager.ttlSeconds=120" -B deploy -Dchangelist= -Dsha1= -Dmaven.test.skip=true -DskipITs -fae -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -Prelease-sign-artifacts
#        env:
#          MAVEN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}


#      - name: upload jnifmuapi
#        uses: actions/upload-artifact@v2
#        with:
#          name: jnifmuapi
#          path: |
#            jnifmuapi/target/jnifmuapi-*-SNAPSHOT.jar
#            fmi2/target/fmi2-*-SNAPSHOT.jar
#          retention-days: 5



